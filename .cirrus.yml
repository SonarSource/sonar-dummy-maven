---
# release-engineering-ci-staging
# gcp_credentials: |
#   ENCRYPTED[aebc0a5ebae9bfa7262fed18dc181d97db901420322b0483a8c8e04751ecde508c8eefbef3e85d17d5e2bdb829c117cb]
# release-engineering-ci-prod
gcp_credentials: >-
  ENCRYPTED[!149d4005ecdba4cdd78bb5ba22756ebb98bf8e3367ee2e9ab08c5a1608c0d3e3b501904b67a1d67c0b63085e469d7dde!]

# language-team-staging gcp project
# gcp_credentials: |
#  ENCRYPTED[!1381ef0f0c48f6705097f17299114c40c859181fdca68834bf429446de4142f216a4e9c714bbdad9ad87947ad0ddd4c6!]
# test-cirrus
# gcp_credentials: |
#  ENCRYPTED[!af138a5aa099fbf14e2683d14deecf93fa8fbb3501fa07a96de500c77b942ed9a6b58bf63971bbbafd93620083038129!]


artifactory_build: &artifactory_build
  ARTIFACTORY_API_KEY: >-
    VAULT[development/artifactory/token/${CIRRUS_REPO_OWNER}-${CIRRUS_REPO_NAME}-private-reader access_token]
  ARTIFACTORY_DEPLOY_USERNAME: vault-${CIRRUS_REPO_OWNER}-${CIRRUS_REPO_NAME}-qa-deployer
  ARTIFACTORY_DEPLOY_PASSWORD: >-
    VAULT[development/artifactory/token/${CIRRUS_REPO_OWNER}-${CIRRUS_REPO_NAME}-qa-deployer access_token]

artifactory_private: &artifactory_private
  ARTIFACTORY_PRIVATE_USERNAME: vault-${CIRRUS_REPO_OWNER}-${CIRRUS_REPO_NAME}-private-reader
  ARTIFACTORY_PRIVATE_PASSWORD: >-
    VAULT[development/artifactory/token/${CIRRUS_REPO_OWNER}-${CIRRUS_REPO_NAME}-private-reader access_token]

env:
  CIRRUS_CLONE_DEPTH: "20"
  CIRRUS_VAULT_URL: https://vault.sonar.build:8200
  CIRRUS_VAULT_AUTH_PATH: jwt-cirrusci
  CIRRUS_VAULT_ROLE: cirrusci-${CIRRUS_REPO_OWNER}-${CIRRUS_REPO_NAME}
  ARTIFACTORY_URL: VAULT[development/kv/data/repox data.url]
  # Possible values for ARTIFACTORY_DEPLOY_REPO: sonarsource-private-qa, sonarsource-public-qa
  ARTIFACTORY_DEPLOY_REPO: sonarsource-private-qa
  # access license key
  # Use bash (instead of sh on linux or cmd.exe on windows)
  CIRRUS_SHELL: bash

container_definition: &CONTAINER_DEFINITION
  image: eu.gcr.io/release-engineering-ci-prod/base:j11-latest
  cluster_name: cirrus-ci
  zone: europe-west4-b
  namespace: default

win_vm_definition: &WINDOWS_VM_DEFINITION
  gce_instance:
    image_project: release-engineering-ci-prod
    image_family: lt-base-windows-jdk17
    platform: windows
    zone: europe-west4-b
    preemptible: "false"
    disk: 80
    type: n1-standard-4

only_sonarsource_qa: &ONLY_SONARSOURCE_QA
  only_if: >
    $CIRRUS_USER_COLLABORATOR == 'true' &&
    $CIRRUS_TAG == "" &&
    ($CIRRUS_PR != "" ||
    $CIRRUS_BRANCH == 'master'
    || $CIRRUS_BRANCH =~ "branch-.*"
    || $CIRRUS_BRANCH =~ "dogfood-on-.*"
    || $CIRRUS_BUILD_SOURCE == 'api'
    )

build_task:
  <<: *ONLY_SONARSOURCE_QA
  gke_container:
    <<: *CONTAINER_DEFINITION
    cpu: 2
    memory: 2G
  env:
    <<: [*artifactory_build, *artifactory_private]
    GITHUB_TOKEN: VAULT[development/github/token/licenses-ro token]
    # analysis on next
    SONAR_HOST_URL: https://next.sonarqube.com/sonarqube
    SONAR_TOKEN: VAULT[development/kv/data/next data.token]
    SIGN_KEY: VAULT[development/kv/data/sign data.key]
    PGP_PASSPHRASE: VAULT[development/kv/data/sign data.passphrase]
    # allow deployment of pull request artifacts to repox
    DEPLOY_PULL_REQUEST: "true"
  maven_cache:
    folder: ${CIRRUS_WORKING_DIR}/.m2/repository
  build_script:
    - source cirrus-env BUILD-PRIVATE
    - regular_mvn_build_deploy_analyze
  cleanup_before_cache_script: cleanup_maven_repository

build_win_task:
  <<: [*ONLY_SONARSOURCE_QA, *WINDOWS_VM_DEFINITION]
  env:
    <<: [*artifactory_build, *artifactory_private]
  build_script:
    - source cirrus-env CI-PRIVATE
    - mvn.cmd test
  cleanup_before_cache_script: cleanup_maven_repository

promote_task:
  depends_on:
    - build
    - build_win
  <<: *ONLY_SONARSOURCE_QA
  gke_container:
    <<: *CONTAINER_DEFINITION
    cpu: 1
    memory: 1G
  env:
    <<: *artifactory_private
    GITHUB_TOKEN: VAULT[development/github/token/${CIRRUS_REPO_OWNER}-${CIRRUS_REPO_NAME}-promotion token]
    # promotion cloud function
    GCF_ACCESS_TOKEN: VAULT[development/kv/data/promote data.token]
    PROMOTE_URL: VAULT[development/kv/data/promote data.url]
    # artifacts that will have downloadable links in burgr
    ARTIFACTS: com.sonarsource.dummy:sonar-dummy-plugin:jar
    BURGR_URL: VAULT[development/kv/data/burgr data.url]
    BURGR_USERNAME: VAULT[development/kv/data/burgr data.cirrus_username]
    BURGR_PASSWORD: VAULT[development/kv/data/burgr data.cirrus_password]
  maven_cache:
    folder: ${CIRRUS_WORKING_DIR}/.m2/repository
  script:
    - cirrus_promote_maven
  cleanup_before_cache_script: cleanup_maven_repository
